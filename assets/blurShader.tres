[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;


uniform float directions : hint_range(0.0, 24.0, 1) = 16.0; // This uniform is linked to a for loop's range, increasing it will result in slowdowns. 
uniform float quality : hint_range(0.0, 16.0, 1) = 16.0; //  This uniform is linked to a for loop's range, increasing it will result in slowdowns. 
uniform float size : hint_range(0.0, 128.0, 1) = 12.0; // Increasing this should not affect performance.

const float PI = 3.14159265359;


vec4 gaussian_blur(sampler2D tex, vec2 uv, vec2 screen_pixel_size){
	vec4 color = texture(tex, uv);
	vec2 radius = size * screen_pixel_size;
	
	for(float d = 0.0; d < PI * 2.; d += PI * 2. / directions){
		for(float i = 1.0 / quality; i <= 1.0; i += 1.0 / quality){
			color += texture(tex, uv + vec2(cos(d), sin(d)) * radius * i);
		}
	}
	
	color /= quality * directions - 15.0;
	return color;
}


void fragment() {
	COLOR = gaussian_blur(SCREEN_TEXTURE, SCREEN_UV, SCREEN_PIXEL_SIZE);
}"

[resource]
shader = SubResource( 1 )
shader_param/directions = 16.0
shader_param/quality = 16.0
shader_param/size = 12.0
